# -*- coding: utf-8 -*-
"""
Created on Thu Nov 23 15:31:27 2017
@author: will
"""
def scanner(step, crit, crite): # step 1-5,  crit - critical for eq, crite - critical for explosion
    from obspy.core import read
    from obspy.signal.cross_correlation import xcorr
    import glob
    import time
       #%% constants    
    shift=50*step
    #%% Read in sample waveforms with which to compare all waveforms      
    sample = read('/media/will/8209dcbc-09a8-4e6e-a048-6e0d2f2d2407/330a.mseed')
    trace=sample[2]
    trace.detrend(type='demean')
    trace.filter("lowpass",freq=3)
    
    #Earthquake
    start1= sample[2].stats.starttime + 3*60*60 + 52*60 + 30 #time window start - 2s before Pwave arrival
    trs1 = trace.slice(starttime = start1  , endtime= start1 + 40) #cut out sample waveform with same window length as chosen event
    
    #Explosion
    start2= sample[2].stats.starttime + 7*60*60 + 6*60 + 45 #time window start - 2s before Pwave arrival
    trs2 = trace.slice(starttime = start2  , endtime= start2 + 40) #cut out sample waveform with same window length as chosen event
    
    #%%
    T1= time.clock()
    #create empty stream for traces to be scanned
    stream = sample.copy()
    stream = stream.clear()
    #open files to write event times into
    file_quake = open('/media/will/8209dcbc-09a8-4e6e-a048-6e0d2f2d2407/catelogue/equake_test4.txt','w')
    file_exp = open('/media/will/8209dcbc-09a8-4e6e-a048-6e0d2f2d2407/catelogue/explosion_test4.txt','w')
    #%% read in day of interest and select first vertical channel, open 
    for file in glob.glob('/media/will/8209dcbc-09a8-4e6e-a048-6e0d2f2d2407/32*.mseed'):
        seis = read(file)
        for t in range(2,4,1):
            if seis[t].stats.channel in ['HHZ']:
                tr=seis[t]
                tr.detrend(type='demean')
                tr.filter("lowpass", freq=3)
                stream.append(tr)
    stream.sort(keys=['starttime']) 
    print('files read in') 
    print(stream)
    #%% cross correlation in shifting time window and find well correlated waveforms
    # 
    for x in range(0,len(stream),1):
        begin = stream[x].stats.starttime
        add=0          
        for t in range(0,86360, step):
            start = begin + t + add
            if t +add > 86360:
                file_exp.write("\n")
                file_quake.write("\n")
                break
            trc = stream[x].slice(starttime = start  , endtime= start + 40)
            corel1=xcorr(trs1, trc, shift, full_xcorr=True )
            corel2=xcorr(trs2, trc, shift, full_xcorr=True )     
           
            if abs(corel1[1]) > crit:
                eventt = start - corel1[0]/100 +2
                add +=40
                file_quake.write(str(eventt))
                file_quake.write("\n")
            if abs(corel2[1]) > crite:
                expt = start -corel2[0]/100 +2
                add += 40    
                file_exp.write(str(expt))
                file_exp.write("\n")
    file_exp.close()
    file_quake.close()
    print("End of Scan")
    T2=time.clock()
    elapsed= T2-T1
    print('Time taken:', elapsed)
